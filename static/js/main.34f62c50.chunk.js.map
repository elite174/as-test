{"version":3,"sources":["features/App/App.store/const/index.ts","features/App/App.store/actions/index.ts","api/const/index.ts","features/App/App.store/index.ts","features/App/App.context/index.ts","elements/Checkbox/Checkbox.tsx","components/TransferFilter/TransferFilter.tsx","components/Ticket/Ticket.utils/index.ts","components/Ticket/Segment/Ticket-Segment.tsx","components/Ticket/Ticket.tsx","components/TicketList/TicketList.utils/index.ts","components/TicketList/TicketList.tsx","api/utils/index.ts","api/index.ts","features/App/App.tsx","index.tsx"],"names":["FilterState","TransferCountsNames","ActionTypes","TransferCounts","all","zero","one","two","three","initialTransferCounts","routes","initialState","tickets","sortBy","cheap","transferCounts","transferCountsValues","reducer","state","action","produce","draft","type","addTickets","concat","Object","toConsumableArray","payload","setTransferCount","newTransferCountsValues","key","push","length","AppContext","React","createContext","store","dispatch","cnCheckbox","cn","Checkbox","memo","props","checked","text","onCheckboxChange","name","react_default","a","createElement","className","onChange","cnTransferFilter","TransferFilter","checkboxHandler","useContext","useCallback","e","target","Checkbox_Checkbox","padTime","time","String","padStart","TicketSegment","origin","destination","duration","stops","date","ticketDate","Date","departureTime","getHours","getMinutes","getTime","arrivalTime","cnTicket","stopsCount","lastNumber","formatStops","minutes","hours","Math","floor","days","formattedString","formatFlightTime","join","Ticket","carrier","ticket","price","prefix","slice","parts","match","formatPrice","style","backgroundImage","segments","map","segment","i","assign","priceComparator","t1","t2","durationComparator","reduce","acc","cnTicketList","TicketList","renderedTickets","useMemo","filter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","stop","value","includes","err","return","sort","Ticket_Ticket","rowRenderer","_ref","index","es","rowCount","rowHeight","width","height","makeRequest","route","searchId","fetch","url","makeUrl","cnApp","App","_useReducer","useReducer","_useReducer2","slicedToArray","_useState","useState","_useState2","setSortBy","chechboxHandler","checkboxName","transferCountName","useEffect","getSearchId","asyncToGenerator","regenerator_default","mark","_callee","response","json","wrap","_context","prev","search","sent","abrupt","apply","this","arguments","getFlights","_ref2","_callee2","_context2","t0","setTimeout","_x","_ref3","_callee3","_context3","request","Provider","TransferFilter_TransferFilter","onClick","active","fast","TicketList_TicketList","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.34f62c50.chunk.js","sourcesContent":["export enum FilterState {\n    cheap,\n    fast\n};\n\nexport enum TransferCountsNames {\n    all = 'all',\n    zero = 'zero',\n    one = 'one',\n    two = 'two',\n    three = 'three'\n};\n\nexport const TransferCounts: Record<TransferCountsNames, number> = {\n    all: -1,\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n};\n\nexport const initialTransferCounts: Record<TransferCountsNames, boolean> = {\n    all: true,\n    one: false,\n    two: false,\n    three: false,\n    zero: false\n};","import { TransferCountsNames } from \"../const\";\nimport { ITicket } from \"../../../../api/typings\";\n\nexport interface IBaseAction {\n    type: string;\n    payload?: any;\n};\n\n/** Типы событий хранилища */\nexport enum ActionTypes {\n    addTickets = 'addTickets',\n    setTransferCount = 'setTransferCount'\n}\n\nexport const addTickets = (tickets: ITicket[]): IBaseAction => ({\n    type: ActionTypes.addTickets,\n    payload: tickets,\n});\n\nexport const setTransferCount = (transferCountName: TransferCountsNames) => ({\n    type: ActionTypes.setTransferCount,\n    payload: transferCountName,\n});\n","/** Url для запросов */\r\nexport const endpoint = 'https://front-test.beta.aviasales.ru/';\r\n\r\n/** Доступные пути для path запросов */\r\nexport enum routes {\r\n  search = 'search',\r\n  tickets = 'tickets',\r\n};\r\n","import produce from 'immer';\r\n\r\nimport { ITicket } from \"../../../api/typings\";\r\nimport { FilterState, TransferCountsNames, TransferCounts, initialTransferCounts } from './const';\r\nimport { IBaseAction, ActionTypes } from './actions';\r\n\r\nexport interface IStore {\r\n  /** Список билетов */\r\n  tickets: ITicket[];\r\n  /** Метод сортировки билетов */\r\n  sortBy: FilterState;\r\n  /** Выбранные фильтры пересадок */\r\n  transferCounts: Record<TransferCountsNames, boolean>,\r\n  /** Массив значений выбранных пересадок */\r\n  transferCountsValues: number[];\r\n};\r\n\r\nexport const initialState: IStore = {\r\n  tickets: [],\r\n  sortBy: FilterState.cheap,\r\n  transferCounts: initialTransferCounts,\r\n  transferCountsValues: [TransferCounts.all],\r\n};\r\n\r\nexport const reducer = (state: IStore, action: IBaseAction) => produce(state, draft => {\r\n  switch (action.type) {\r\n    case ActionTypes.addTickets:\r\n      draft.tickets = [...draft.tickets, ...action.payload];\r\n      return draft;\r\n\r\n    case ActionTypes.setTransferCount:\r\n      /** Если выбрали \"Все\", то обнуляем остальные чекбоксы */\r\n      if (action.payload === TransferCountsNames.all) {\r\n        draft.transferCounts = initialTransferCounts\r\n        draft.transferCountsValues = [TransferCounts.all];\r\n\r\n        return draft;\r\n      }\r\n\r\n      draft.transferCounts[action.payload as TransferCountsNames] = !draft.transferCounts[action.payload as TransferCountsNames];\r\n      const newTransferCountsValues= [];\r\n\r\n      if (draft.transferCounts[action.payload as TransferCountsNames]) {\r\n        draft.transferCounts[TransferCountsNames.all] = false;\r\n      }\r\n\r\n      /** Формируем новый список значений фильтра пересадок */\r\n      for (const key in draft.transferCounts) {\r\n        if (draft.transferCounts[key as TransferCountsNames]) {\r\n          newTransferCountsValues.push(TransferCounts[key as TransferCountsNames]);\r\n        }\r\n      }\r\n\r\n      /** Если список пустой, то нужно выбрать вариант \"Все\" */\r\n      if (newTransferCountsValues.length === 0) {\r\n        newTransferCountsValues.push(TransferCounts.all);\r\n        draft.transferCounts[TransferCountsNames.all] = true;\r\n      }\r\n\r\n      draft.transferCountsValues = newTransferCountsValues;\r\n      return draft;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n});","import React from 'react';\r\n\r\nimport { initialState, IStore } from '../App.store';\r\nimport { IBaseAction } from '../App.store/actions';\r\n\r\ninterface IAppContext {\r\n    store: IStore;\r\n    dispatch: (action: IBaseAction) => void;\r\n};\r\n\r\nexport const AppContext = React.createContext<IAppContext>({\r\n    store: initialState,\r\n    dispatch: () => {}\r\n});\r\n","import React from 'react';\nimport { cn } from 'recn';\n\nimport './Checkbox.scss';\n\nconst cnCheckbox = cn('Checkbox');\n\ninterface ICheckboxProps {\n    checked?: boolean;\n    /** Текст чекбокса */\n    text: string;\n    /** Обработчик клика чекбокса */\n    onCheckboxChange?: React.ChangeEventHandler<HTMLInputElement>;\n    /** Имя чекбокса */\n    name?: string;\n}\n\nexport const Checkbox: React.FC<ICheckboxProps> = React.memo(props => {\n    const { checked, text, onCheckboxChange, name } = props;\n\n    return (\n        <label className={cnCheckbox()}>\n            <input name={name} className={cnCheckbox('Input')} type=\"checkbox\" checked={checked} onChange={onCheckboxChange} />\n            <span className={cnCheckbox('CheckMark')}></span>\n            <span className={cnCheckbox('Text')}>{text}</span>\n        </label>\n    );\n});\n","import React, { useCallback, useContext } from 'react';\nimport { cn } from 'recn';\n\nimport { Checkbox } from '../../elements/Checkbox/Checkbox';\nimport { TransferCountsNames } from '../../features/App/App.store/const';\nimport { AppContext } from '../../features/App/App.context';\n\nimport './TransferFilter.scss';\n\nconst cnTransferFilter = cn('TransferFilter');\n\nexport interface TransferFilterProps {\n    /** Обработчик на нажатие checkbox */\n    checkboxHandler: (checkboxName: TransferCountsNames) => void;\n}\n\nexport const TransferFilter: React.FC<TransferFilterProps> = React.memo(props => {\n    const { checkboxHandler } = props;\n    const { store } = useContext(AppContext);\n    const onCheckboxChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n        checkboxHandler(e.target.name as TransferCountsNames);\n    }, [checkboxHandler]);\n\n    return (\n        <div className={cnTransferFilter()}>\n            <div className={cnTransferFilter('Caption')}>Количество пересадок</div>\n            <Checkbox text=\"Все\" checked={store.transferCounts.all} name={TransferCountsNames.all} onCheckboxChange={onCheckboxChange} />\n            <Checkbox text=\"Без пересадок\" checked={store.transferCounts.zero} name={TransferCountsNames.zero} onCheckboxChange={onCheckboxChange} />\n            <Checkbox text=\"1 пересадка\" checked={store.transferCounts.one} name={TransferCountsNames.one} onCheckboxChange={onCheckboxChange} />\n            <Checkbox text=\"2 пересадки\" checked={store.transferCounts.two} name={TransferCountsNames.two} onCheckboxChange={onCheckboxChange} />\n            <Checkbox text=\"3 пересадки\" checked={store.transferCounts.three} name={TransferCountsNames.three} onCheckboxChange={onCheckboxChange} />\n        </div>\n    );\n});\n","/**\n * Возвращает отформатированную строку со временем перелёта\n * \n * @param time string\n */\nexport const formatFlightTime = (time: number) => {\n    const minutes = time % 60;\n    const hours = Math.floor(time / 60) % 24;\n    const days = Math.floor(time / 60 / 24);\n\n    let formattedString = `${minutes}м`;\n\n    if (hours || days) {\n        formattedString = `${hours}ч ` + formattedString;\n    }\n\n    if (days) {\n        formattedString = `${days}д ` + formattedString;\n    }\n\n    return formattedString;\n};\n\n/**\n * Возвращает отформатированную строку с ценой\n * @param price number\n */\nexport const formatPrice = (price: number) => {\n    let formattedString = String(Math.floor(price));\n\n    if (formattedString.length < 4) {\n        return formattedString + ' Р';\n    }\n\n    const prefix = formattedString.slice(0, formattedString.length % 3);\n    const parts = formattedString.slice(formattedString.length % 3).match(/.{1,3}/g);\n\n    return (prefix ? `${prefix} ` : '') +\n        (parts ? parts.join(' ') : '') + ' Р';\n};\n\n/**\n * Возвращает ссылку на лого компании\n * \n * @param carrier string\n */\nexport const getCarrierLogo = (carrier: string) => {\n    return `//pics.avs.io/99/36/${carrier}.png`;\n};\n\n/**\n * Возвращает отформатированную строку с количеством пересадок\n * \n * @param stopsCount number\n */\nexport const formatStops = (stopsCount: number) => {\n    const lastNumber = stopsCount % 100;\n\n    if (stopsCount === 0) {\n        return 'прямой';\n    }\n\n    if (lastNumber > 10 && lastNumber < 20) {\n        return `${stopsCount} пересадок`\n    }\n\n    switch (stopsCount % 10) {\n        case 1:\n            return `${stopsCount} пересадка`;\n        case 2:\n        case 3:\n        case 4:\n            return `${stopsCount} пересадки`;\n        default:\n            return `${stopsCount} пересадок`;\n    };\n};\n\n/** Дополняет строку нулями */\nexport const padTime = (time: number) => String(time).padStart(2, '0');","import React from 'react';\n\nimport { cnTicket } from '../Ticket';\nimport { formatStops, formatFlightTime, padTime } from '../Ticket.utils';\n\nimport './Ticket-Segment.scss';\n\ninterface ITicketSegmentProps {\n    /** Код города (iata) */\n    origin: string;\n    /** Код города (iata) */\n    destination: string;\n    /** Массив кодов (iata) городов с пересадками */\n    stops: string[];\n    /** Общее время перелёта в минутах */\n    duration: number;\n    /** Дата и время вылета */\n    date: string;\n}\n\nexport const TicketSegment: React.FC<ITicketSegmentProps> = React.memo(props => {\n    const { origin, destination, duration, stops, date } = props;\n\n    /** Формируем время отлёта и прилёта */\n    let ticketDate = new Date(date);\n    const departureTime = `${padTime(ticketDate.getHours())}:${padTime(ticketDate.getMinutes())}`;\n    ticketDate = new Date(ticketDate.getTime() + duration * 60 * 1000);\n    const arrivalTime = `${padTime(ticketDate.getHours())}:${padTime(ticketDate.getMinutes())}`;\n\n    return (\n        <div className={cnTicket('Segment')}>\n            <table className={cnTicket('SegmentTable')}>\n                <tbody>\n                    <tr className={cnTicket('KeyRow')}>\n                        <td>{origin} - {destination}</td>\n                        <td>в пути</td>\n                        <td>{formatStops(stops.length)}</td>\n                    </tr>\n                    <tr className={cnTicket('ValueRow')}>\n                        <td>{departureTime} - {arrivalTime}</td>\n                        <td>{formatFlightTime(duration)}</td>\n                        <td>{stops.join(', ')}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n});\n","import React from 'react';\nimport { cn } from 'recn';\n\nimport { ITicket } from '../../api/typings';\nimport { formatPrice, getCarrierLogo } from './Ticket.utils';\nimport { TicketSegment } from './Segment/Ticket-Segment';\n\nimport './Ticket.scss';\n\nexport const cnTicket = cn('Ticket');\n\ninterface ITicketProps {\n    /** Информация о билете */\n    ticket: ITicket;\n}\n\nexport const Ticket: React.FC<ITicketProps> = React.memo(props => {\n    const { ticket } = props;\n\n    return (\n        <div className={cnTicket()}>\n            <div className={cnTicket('Row')}>\n                <div className={cnTicket('Price')}>{formatPrice(ticket.price)}</div>\n                <div className={cnTicket('CarrierLogo')} style={{\n                    backgroundImage: `url(${getCarrierLogo(ticket.carrier)})`\n                }} />\n            </div>\n            <div className={cnTicket('Info')}>\n                {ticket.segments.map((segment, i) => (\n                    <TicketSegment\n                        // Сегменты не меняются,\n                        // поэтому можно использовать такой ключ\n                        key={`segment-${i}`}\n                        {...segment} />\n                ))}\n            </div>\n        </div>\n    );\n});\n","import { ITicket } from \"../../../api/typings\";\n\nexport const priceComparator = (t1: ITicket, t2: ITicket) => t1.price - t2.price;\n\n/**\n * Функция-компаратор\n * Сравнивает билеты по суммарной длительности перелётов\n */\nexport const durationComparator = (t1: ITicket, t2: ITicket) => (\n    t1.segments.reduce((acc, segment) => acc + segment.duration, 0) - t2.segments.reduce((acc, segment) => acc + segment.duration, 0)\n);\n","import React, { useMemo, useCallback, useContext } from 'react';\nimport { List } from 'react-virtualized';\nimport { cn } from 'recn';\n\nimport { Ticket } from '../Ticket/Ticket';\nimport { FilterState } from '../../features/App/App.store/const';\nimport { priceComparator, durationComparator } from './TicketList.utils';\nimport { AppContext } from '../../features/App/App.context';\n\nimport './TicketList.scss';\n\nconst cnTicketList = cn('TicketList');\n\ninterface ITicketListProps {\n    /** Метод сортировки */\n    sortBy: FilterState;\n}\n\n/** Высота строки с билетом */\nconst rowHeight = 204;\n/** Ширина листа с билетами */\nconst listWidth = 503;\n/** Высота всего листа с билетами */\nconst listHeight = 1015;\n\nexport const TicketList: React.FC<ITicketListProps> = React.memo(props => {\n    const { sortBy } = props;\n    const { store } = useContext(AppContext);\n    const renderedTickets = useMemo(() => store.tickets\n        /** Фильтруем билеты по пересадкам */\n        .filter(ticket => {\n            if (store.transferCounts.all) {\n                return true;\n            }\n\n            const stops = ticket.segments.map(segment => segment.stops.length);\n            for (const stop of stops) {\n                if (!store.transferCountsValues.includes(stop)) {\n                    return false;\n                }\n            }\n\n            return true;\n        })\n        .sort(sortBy === FilterState.cheap ? priceComparator : durationComparator)\n        .map(ticket => <Ticket ticket={ticket} />), [store.tickets, sortBy, store.transferCountsValues, store.transferCounts.all]);\n\n    /** Render-фуннкция для virtualized листа */\n    const rowRenderer = useCallback(({ key, index, style }) => {\n        return (\n            <div style={style} key={key}>\n                {renderedTickets[index]}\n            </div>\n        );\n    }, [renderedTickets]);\n\n    return (\n        <div className={cnTicketList()}>\n            {renderedTickets.length === 0 ?\n                <div className={cnTicketList('EmptyResult')}>билеты не найдены</div> : <List\n                    rowCount={renderedTickets.length}\n                    rowHeight={rowHeight}\n                    width={listWidth}\n                    height={listHeight}\n                    rowRenderer={rowRenderer} />}\n\n        </div>\n    );\n});\n","import { endpoint, routes } from \"../const\";\r\n\r\n/** Формирует ссылку для запроса */\r\nexport const makeUrl = (route: routes, searchId?: string) => {\r\n  const url = `${endpoint}${route}`;\r\n\r\n  if (!searchId) {\r\n    return url;\r\n  }\r\n\r\n  return `${url}?searchId=${searchId}`;\r\n};\r\n","import { routes } from \"./const\";\r\nimport { makeUrl } from \"./utils\";\r\n\r\nexport const makeRequest = (route: routes, searchId?: string) => fetch(makeUrl(route, searchId));\r\n","import React, { useReducer, useEffect, useState, useCallback } from 'react';\r\nimport { cn } from 'recn';\r\n\r\nimport { AppContext } from './App.context';\r\nimport { TransferFilter } from '../../components/TransferFilter/TransferFilter';\r\nimport { reducer, initialState } from './App.store';\r\nimport { FilterState, TransferCountsNames } from './App.store/const';\r\nimport { addTickets, setTransferCount } from './App.store/actions';\r\nimport { TicketList } from '../../components/TicketList/TicketList';\r\nimport { makeRequest } from '../../api';\r\nimport { routes } from '../../api/const';\r\n\r\nimport './App.scss';\r\nimport './App.constants.scss';\r\n\r\nconst cnApp = cn('App');\r\n\r\nexport const App: React.FC<{}> = React.memo(() => {\r\n  const [store, dispatch] = useReducer(reducer, initialState);\r\n  const [sortBy, setSortBy] = useState(FilterState.cheap);\r\n  const chechboxHandler = useCallback((checkboxName: TransferCountsNames) =>\r\n    dispatch(setTransferCount(checkboxName)), []);\r\n\r\n  useEffect(() => {\r\n    /** Получаем searchId */\r\n    const getSearchId = async () => {\r\n      const response = await makeRequest(routes.search);\r\n      const json = await response.json();\r\n\r\n      return json.searchId;\r\n    };\r\n\r\n    /** Получаем пачку билетов */\r\n    const getFlights = async (searchId: string) => {\r\n\r\n      const response = await makeRequest(routes.tickets, searchId);\r\n      let json;\r\n\r\n      try {\r\n        json = await response.json();\r\n      } catch (err) {\r\n        /** Прекращаем поиск, если сервер ответил ошибкой */\r\n        return;\r\n      }\r\n\r\n      dispatch(addTickets(json.tickets));\r\n\r\n      /** Продолжаем получать пачки билетов */\r\n      if (!json.stop) {\r\n        setTimeout(() => getFlights(searchId), 0);\r\n      }\r\n    };\r\n\r\n    /** Делаем запросы на сервер */\r\n    const request = async () => {\r\n      const searchId = await getSearchId();\r\n\r\n      await getFlights(searchId);\r\n    };\r\n\r\n    request();\r\n  }, []);\r\n\r\n  return (\r\n    <AppContext.Provider value={{ store, dispatch }}>\r\n      <div className={cnApp()}>\r\n        <div className={cnApp('Logo')}></div>\r\n        <div className={cnApp('Content')}>\r\n          <div className={cnApp('LeftColumn')}>\r\n            <TransferFilter checkboxHandler={chechboxHandler} />\r\n          </div>\r\n          <div className={cnApp('RightColumn')}>\r\n            <div className={cnApp('FilterControl')}>\r\n              <div\r\n                onClick={() => setSortBy(FilterState.cheap)}\r\n                className={cnApp('FilterButton', { active: sortBy === FilterState.cheap })}\r\n              >\r\n                Самый дешёвый\r\n              </div>\r\n              <div\r\n                onClick={() => setSortBy(FilterState.fast)}\r\n                className={cnApp('FilterButton', { active: sortBy === FilterState.fast })}\r\n              >\r\n                Самый быстрый\r\n              </div>\r\n            </div>\r\n            <TicketList sortBy={sortBy} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </AppContext.Provider >\r\n  );\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './features/App/App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}